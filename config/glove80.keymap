
/*
 * Copyright (c) 2020 The ZMK Contributors
 * Copyright (c) 2022 Innaworks Development Limited, trading as MoErgo
 *
 * SPDX-License-Identifier: MIT
 */


/* Include all behaviour includes needed by system behaviors/macros */
#include <behaviors.dtsi>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>

/ {
    /* Glove80 system behavior & macros */
    behaviors {
        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to
        lower: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYER_TAP_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo 1>, <&to 1>;
        };
    };

    macros {
        rgb_ug_status_macro: rgb_ug_status_macro_0 {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&rgb_ug RGB_STATUS>;
        };

        bt_0: bt_profile_macro_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 0>;
        };

        bt_1: bt_profile_macro_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 1>;
        };

        bt_2: bt_profile_macro_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 2>;
        };

        bt_3: bt_profile_macro_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 3>;
        };
    };
};

/ {
    magic: magic_hold_tap {
        compatible = "zmk,behavior-hold-tap";
        label = "MAGIC_HOLD_TAP";
        #binding-cells = <2>;
        flavor = "tap-preferred";
        tapping-term-ms = <200>;
        bindings = <&mo>, <&rgb_ug_status_macro>;
    };

};

/* Custom Defined Behaviors */
/ {
    /* lsyers */
    #define L_BASE 0
    #define L_SYMBOL_LED 1
    #define L_MOVEMENT_LED 2
    #define L_SYMBOL 3
    #define L_MOVEMENT 4
    #define L_SYMBOL_LEFT 5
    #define L_MOVEMENT_RIGHT 6


/*****************************************************************************/
                                /* Macros */
/*****************************************************************************/
    macros {
        // unstickies a sticky key and then holds it
        // parameter 1: key code
        unsk: unsticky_key {
            compatible = "zmk,behavior-macro-one-param";
            label = "UNSTICKY_KEY";
            #binding-cells = <1>;
            wait-ms = <0>;
            tap-ms = <30>;
            bindings
                = <&macro_tap &kp K_CANCEL>
                , <&macro_press>
                , <&macro_param_1to1>
                , <&kp MACRO_PLACEHOLDER>
                , <&macro_pause_for_release>
                , <&macro_release>
                , <&macro_param_1to1>
                , <&kp MACRO_PLACEHOLDER>
                ;
        };
        left_arrow: left_arrow {
            compatible = "zmk,behavior-macro-one-param";
            label = "LEFT_ARROW";
            #binding-cells = <1>;
            wait-ms = <0>;
            tap-ms = <30>;
            bindings
                = <&macro_tap &kp LESS_THAN>
                , <&macro_param_1to1>
                , <&macro_tap &kp MACRO_PLACEHOLDER>
                ;
        };
        right_arrow: right_arrow {
            compatible = "zmk,behavior-macro-one-param";
            label = "RIGHT_ARROW";
            #binding-cells = <1>;
            wait-ms = <0>;
            tap-ms = <30>;
            bindings
                = <&macro_param_1to1>
                , <&macro_tap &kp MACRO_PLACEHOLDER>
                , <&macro_tap &kp GREATER_THAN>
                ;
        };
        to_symbol: to_symbol {
            compatible = "zmk,behavior-macro";
            label = "TO_SYMBOL";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <30>;
            bindings
                = <&macro_tap &rgb_ug RGB_COLOR_HSB(255,100,40)>
                , <&macro_tap &rgb_ug RGB_ON>
                , <&macro_tap &to L_SYMBOL>
                ;
        };
        to_movement: to_movement {
            compatible = "zmk,behavior-macro";
            label = "TO_MOVEMENT";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <30>;
            bindings
                = <&macro_tap &rgb_ug RGB_COLOR_HSB(138,100,40)>
                , <&macro_tap &rgb_ug RGB_ON>
                , <&macro_tap &to L_MOVEMENT>
                ;
        };
        to_base: to_base {
            compatible = "zmk,behavior-macro";
            label = "TO_BASE";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <30>;
            bindings
                = <&macro_tap &rgb_ug RGB_OFF>
                , <&macro_tap &to L_BASE>
                ;
        };

    };
/*****************************************************************************/
                                /* Behaviors */
/*****************************************************************************/
    // #define trick to convert plain word to string
    #define STRINGIFY(S) #S

    // generates a tap-dance behavior
    #define TAP_DANCE(NAME, TERM, BINDING0, BINDING2) \
    /omit-if-no-ref/ NAME: NAME { \
        compatible = "zmk,behavior-tap-dance"; \
        label = STRINGIFY(TD_##NAME); \
        #binding-cells = <0>; \
        tapping-term-ms = <TERM>; \
        bindings = <BINDING0>, <BINDING2>; \
    }

    behaviors {
        // activate other layers
        TAP_DANCE(td_symbol, 200, &mo L_SYMBOL, &to_symbol);
        TAP_DANCE(td_movement, 200, &mo L_MOVEMENT, &to_movement);

        /* Let Caps Word continue when typing underscores */
        behavior_caps_word {
            continue-list = <UNDERSCORE MINUS BACKSPACE DELETE>;
        };

        // custom sticky key behavior
        /omit-if-no-ref/ skp: sticky_keypress {
            compatible = "zmk,behavior-sticky-key";
            label = "STICKY_KEYPRESS";
            #binding-cells = <1>;
            release-after-ms = <1000>;
            quick-release;
            bindings = <&kp>;
        };

        shift: shift { 
            compatible = "zmk,behavior-hold-tap"; 
            label = "SHIFT"; 
            #binding-cells = <2>; 
            flavor = "hold-preferred"; 
            tapping-term-ms = <200>; 
            global-quick-tap; 
            bindings = <&kp>, <&caps_word>; 
        };

        // shifting Numberic Keypad "2" gives "<"
        two_gt: two_gt {
            compatible = "zmk,behavior-mod-morph";
            label = "TWO_GT";
            #binding-cells = <0>;
            bindings = <&kp KP_N2>, <&kp LESS_THAN>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        // shifting Numberic Keypad "3" gives ">"
        three_gt: three_gt {
            compatible = "zmk,behavior-mod-morph";
            label = "THREE_GT";
            #binding-cells = <0>;
            bindings = <&kp KP_N3>, <&kp GREATER_THAN>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };



/*****************************************************************************/
                                /* Key Positions */
/*****************************************************************************/
/* Use these key positions for Hold Tap hold-trigger-key-positions and Combos
          .----.----.----.                                                  .----.----.----.
.----.----|  2 |  3 |  4 |                                                  |  5 |  6 |  7 |----.----.
|  0 |  1 |----+----+----+----.                                        .----+----+----+----|  8 |  9 |
|----|----| 12 | 13 | 14 | 15 |                                        | 16 | 17 | 18 | 19 |----|----|
| 10 | 11 |----+----+----+----|                                        |----+----+----+----| 20 | 21 |
|----|----| 24 | 25 | 26 | 27 |                                        | 28 | 29 | 30 | 31 |----|----|
| 22 | 23 |----+----+----+----|                                        |----+----+----+----| 32 | 33 |
|----|----| 36 | 37 | 38 | 39 |                                        | 40 | 41 | 42 | 43 |----|----|
| 34 | 35 |----+----+----+----|                                        |----+----+----+----| 44 | 45 |
|----|----| 48 | 49 | 50 | 51 |                                        | 58 | 59 | 60 | 61 |----|----|
| 46 | 47 |----+----+----+----'                                        '----+----+----+----| 62 | 63 |
|----|----| 66 | 67 | 68 |       .----.                        .----.       | 75 | 76 | 77 |----|----|
| 64 | 65 |----'----'----'  .----| 52 |----.              .----| 57 |----.  '----'----'----| 78 | 79 |
'----'----'                 | 69 |----| 53 |----.    .----| 56 |----| 74 |                 '----'----'
                            '----| 70 |----| 54 |    | 55 |----| 73 |----'
                                 '----| 71 |----'    '----| 72 |----'
                                      '----'              '----'
*/

/*****************************************************************************/
                                /* Combos */
/*****************************************************************************/
    combos {
        compatible = "zmk,combos";

        // <- on num layer
        combo_left_arrow {
            timeout-ms = <65>;
            key-positions = <60 44>;
            layers = <L_SYMBOL>;
            bindings = <&left_arrow KP_MINUS>;
        };

        // -> on num layer
        combo_right_arrow {
            timeout-ms = <65>;
            key-positions = <61 44>;
            layers = <L_SYMBOL>;
            bindings = <&right_arrow KP_MINUS>;
        };

        // <= on num layer
        combo_double_left_arrow {
            timeout-ms = <65>;
            key-positions = <60 40>;
            layers = <L_SYMBOL>;
            bindings = <&left_arrow EQUAL>;
        };

        // => on num layer
        combo_double_right_arrow {
            timeout-ms = <65>;
            key-positions = <61 40>;
            layers = <L_SYMBOL>;
            bindings = <&right_arrow EQUAL>;
        };

        // use chord DF as a modifier move to movement_right layer
        combo_df_modal_movement {
            timeout-ms = <65>;
            key-positions = <37 38>;
            bindings = <&mo L_MOVEMENT_RIGHT>;
        };

        // use chord DF as a modifier move to movement_right layer
        combo_jk_modal_movement {
            timeout-ms = <65>;
            key-positions = <41 42>;
            bindings = <&mo L_SYMBOL_LEFT>;
        };

   };

/*****************************************************************************/
                            /* Condiional Layers */
/*****************************************************************************/
    /* Helper for defining conditional layers */
    #define LAYER_CONDITION(NAME, IF, THEN) \
        NAME { \
            if-layers = <IF>; \
            then-layer = <THEN>; \
        };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        /* Turn on Magic LED indicators for thumb layers */
        LAYER_CONDITION(symbol_led, L_SYMBOL, L_SYMBOL_LED)
        LAYER_CONDITION(movement_led, L_MOVEMENT, L_MOVEMENT_LED)
    };
 };

 
/ {
    /* Automatically generated keymap */
    keymap {
        compatible = "zmk,keymap";


        layer_Base {
            bindings = <
     &kp F1     &kp F2    &kp F3    &kp F4     &kp F5                                                                                               &kp F6     &kp F7    &kp F8     &kp F9    &kp F10
  &kp EQUAL     &kp N1    &kp N2    &kp N3     &kp N4  &kp N5                                                                            &kp N6     &kp N7     &kp N8    &kp N9     &kp N0  &kp MINUS
    &kp TAB      &kp Q     &kp W     &kp E      &kp R   &kp T                                                                             &kp Y      &kp U      &kp I     &kp O      &kp P   &kp BSLH
    &kp ESC      &kp A     &kp S     &kp D      &kp F   &kp G                                                                             &kp H      &kp J      &kp K     &kp L   &kp SEMI    &kp SQT
  &kp GRAVE      &kp Z     &kp X     &kp C      &kp V   &kp B    &td_symbol  &td_movement    &lower  &kp LGUI  &td_movement  &td_symbol   &kp N      &kp M  &kp COMMA   &kp DOT   &kp FSLH  &kp PG_UP
 &magic 7 0    &shift LSHIFT LSHIFT  &kp LGUI  &kp LALT  &kp LCTRL            &kp BSPC         &kp DEL  &kp LALT  &kp RALT       &kp RET   &kp SPACE          &kp RCTRL   &kp RALT  &kp LGUI    &shift RSHIFT RSHIFT  &kp PG_DN
            >;
        };

        layer_Symbol_LED {
            bindings = <
       &trans  &trans  &trans  &trans  &trans                                                                     &trans  &trans  &trans  &trans  &trans
       &trans  &trans  &trans  &trans  &trans  &trans                                                     &trans  &trans  &trans  &trans  &trans  &trans
       &trans  &trans  &trans  &trans  &trans  &trans                                                     &trans  &trans  &trans  &trans  &trans  &trans
       &trans  &trans  &trans  &trans  &trans  &trans                                                     &trans  &trans  &trans  &trans  &trans  &trans
       &trans  &trans  &trans  &trans  &trans  &trans   &trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
       &trans  &trans  &trans  &trans  &trans           &trans  &trans  &trans  &trans  &trans  &trans            &trans  &trans  &trans  &trans  &trans
            >;
        };

        layer_Movement_LED {
            bindings = <
       &trans  &trans  &trans  &trans  &trans                                                                     &trans  &trans  &trans  &trans  &trans
       &trans  &trans  &trans  &trans  &trans  &trans                                                     &trans  &trans  &trans  &trans  &trans  &trans
       &trans  &trans  &trans  &trans  &trans  &trans                                                     &trans  &trans  &trans  &trans  &trans  &trans
       &trans  &trans  &trans  &trans  &trans  &trans                                                     &trans  &trans  &trans  &trans  &trans  &trans
       &trans  &trans  &trans  &trans  &trans  &trans   &trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
       &trans  &trans  &trans  &trans  &trans           &trans  &trans  &trans  &trans  &trans  &trans            &trans  &trans  &trans  &trans  &trans
            >;
        };

        layer_Symbol {
            bindings = <
 &kp C_BRI_DN  &kp C_BRI_UP  &kp C_PREV  &kp C_NEXT  &kp C_PP                                                                                        &kp C_MUTE  &kp C_VOL_DN  &kp C_VOL_UP            &none  &kp PAUSE_BREAK
       &trans         &none       &none       &none     &none   &kp HOME                                                       &kp LEFT_PARENTHESIS  &kp KP_NUM      &kp BSPC  &kp KP_SLASH  &kp KP_MULTIPLY  &kp PRINTSCREEN
       &trans      &kp EXCL      &kp AT    &kp HASH  &kp DLLR  &kp PRCNT                                                                   &kp FSLH   &kp KP_N7     &kp KP_N8     &kp KP_N9     &kp KP_MINUS   &kp SCROLLLOCK
       &trans     &kp CARET    &kp AMPS    &kp LBKT  &kp LBRC   &kp LPAR                                                                  &kp EQUAL   &kp KP_N4     &kp KP_N5     &kp KP_N6     &kp KP_MINUS          &kp INS
       &trans     &kp UNDER    &kp PIPE    &kp RBKT  &kp RBRC   &kp RPAR  &to_base  &trans  &trans  &trans  &trans   &to_base              &kp STAR   &kp KP_N1       &two_gt     &three_gt      &kp KP_PLUS           &trans
       &trans        &trans      &trans      &trans    &trans             &trans    &trans  &trans  &trans  &trans  &kp KP_N0                            &kp N0     &kp COMMA    &kp KP_DOT     &kp KP_ENTER           &trans
            >;
        };

        layer_Movement {
            bindings = <
        &trans     &trans         &trans         &trans     &trans                                                                                             &trans      &trans         &trans  &trans  &trans
        &trans     &trans         &trans         &trans     &trans    &kp C_MUTE                                                                 &trans        &trans      &trans         &trans  &trans  &trans
        &trans     &trans  &kp LC(RIGHT)  &kp LC(RIGHT)  &kp LC(R)  &kp C_VOL_UP                                                           &kp LC(LEFT)  &kp LC(DOWN)  &kp LC(UP)  &kp LC(RIGHT)  &trans  &trans
        &trans  &kp LC(A)      &kp LC(S)      &kp LC(D)  &kp LC(F)  &kp C_VOL_DN                                                               &kp LEFT      &kp DOWN      &kp UP      &kp RIGHT  &trans  &trans
 &kp LC(LS(Z))  &kp LC(Z)      &kp LC(X)      &kp LC(C)  &kp LC(V)  &kp LC(LEFT)   &trans  &to_base  &trans  &trans  &to_base  &td_symbol      &kp HOME     &kp PG_DN   &kp PG_UP        &kp END  &trans  &trans
        &trans     &trans         &trans         &trans     &trans                 &trans    &trans  &trans  &trans    &trans      &trans                      &trans      &trans         &trans  &trans  &trans
            >;
        };

        layer_symbol_left {
            bindings = <
 &kp C_BRI_DN  &kp C_BRI_UP  &kp C_PREV  &kp C_NEXT  &kp C_PP                                                                    &trans  &trans  &trans  &trans  &trans 
       &trans         &none       &none       &none     &none   &kp HOME                                                 &trans  &trans  &trans  &trans  &trans  &trans
       &trans      &kp EXCL      &kp AT    &kp HASH  &kp DLLR  &kp PRCNT                                                 &trans  &trans  &trans  &trans  &trans  &trans
       &trans     &kp CARET    &kp AMPS    &kp LBKT  &kp LBRC   &kp LPAR                                                  &kp J   &kp K  &trans  &trans  &trans  &trans
       &trans     &kp UNDER    &kp PIPE    &kp RBKT  &kp RBRC   &kp RPAR  &trans  &trans  &trans &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
       &trans        &trans      &trans      &trans    &trans             &trans  &trans  &trans &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans
            >;
        };

        layer_Movement_right {
            bindings = <
       &trans  &trans          &trans  &trans  &trans                                                                                 &trans      &trans         &trans  &trans  &trans
       &trans  &trans          &trans  &trans  &trans  &trans                                                           &trans        &trans      &trans         &trans  &trans  &trans
       &trans  &trans          &trans  &trans  &trans  &trans                                                     &kp LC(LEFT)  &kp LC(DOWN)  &kp LC(UP)  &kp LC(RIGHT)  &trans  &trans
       &trans  &trans  &kp LEFT_SHIFT   &kp D   &kp F  &trans                                                         &kp LEFT      &kp DOWN      &kp UP      &kp RIGHT  &trans  &trans
       &trans  &trans          &trans  &trans  &trans  &trans   &trans  &trans  &trans  &trans  &trans  &trans        &kp HOME     &kp PG_DN   &kp PG_UP        &kp END  &trans  &trans
       &trans  &trans          &trans  &trans  &trans           &trans  &trans  &trans  &trans  &trans  &trans                        &trans      &trans         &trans  &trans  &trans
            >;
        };

        layer_Magic {
            bindings = <
  &bt BT_CLR            &none            &none            &none            &none                                                                                  &none   &none   &none   &none  &bt BT_CLR_ALL
       &none            &none            &none            &none            &none            &none                                                         &none   &none   &none   &none   &none           &none
       &none  &rgb_ug RGB_SPI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG                                                         &none   &none   &none   &none   &none           &none
 &bootloader  &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_BRD  &rgb_ug RGB_EFF                                                         &none   &none   &none   &none   &none     &bootloader
  &sys_reset            &none            &none            &none            &none            &none   &bt_2   &bt_3         &none   &none   &none   &none   &none   &none   &none   &none   &none      &sys_reset
      &trans            &none            &none            &none            &none                    &bt_0   &bt_1  &out OUT_USB   &none   &none   &none           &none   &none   &none   &none           &to 7
            >;
        };

    };
};
